enum Status {
	PENDING
	REFUSED
	ACCEPTED
	DONE
}

enum ContractType {
	ARTISTIC
	TECHNICIAN
}

input CreateContractInput {
	contractor: ID!
	status: Status!
	type: ContractType!
	startDate: String!
	endDate: String!
	closes:[ID]
	pagesAdmin:[ID]
	services:[ID]
	
}

input UpdateContractInput {
	contractor: ID
	status: Status!
	type: ContractType!
	startDate: String
	endDate: String
	deletedAt:String
	updatedAt: String
}

type Contract {
	_id: ID!
	contractor: User!
    eventPacks:[EventPack]
	closes:[ContractClose]
	pagesAdmin:[PageAdminContract]
	services:[ServiceContributerContract]
	status: Status!
	type: ContractType!
	startDate: String!
	endDate: String!
	createdAt: String!
	deletedAt:String
	updatedAt: String
}

type Query {
	getContracts: [Contract]
	getContractById(_id: ID!): Contract
    getContractByContractor(contracterId: ID!): [Contract]
}

type Mutation {
	createContract(input: CreateContractInput!): Contract
	updateContract(_id: ID!, input: UpdateContractInput): Contract
	 deleteContract(_id: ID!): Boolean
    deleteContractorContracts(contract: ID!): Boolean
}