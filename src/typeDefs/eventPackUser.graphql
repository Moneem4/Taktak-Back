enum EventPackUserType {
	GUEST
	PARTICIPENT
}

input CreateEventPackUserInput {
	packId: ID!
	userId: ID!
	type: EventPackUserType!
	quantity: Float!
	deletedAt:String
    updatedAt: String
}

input UpdateEventPackUserInput {
	
	packId: ID
	userId: ID
	type: EventPackUserType!
	quantity: Float!
}

type EventPackUser {
	_id: ID!
	packId: EventPack!
	userId: ID!
	type: EventPackUserType!
	quantity: Float!
	createdAt: String!
	deletedAt:String
    updatedAt: String
}

type Query {
	getEventPackUsers:[EventPackUser]
	getEventPackUserById(userId: ID!): [EventPackUser]
}

type Mutation {
	createEventPackUser(input: CreateEventPackUserInput!): EventPackUser
	updateEventPackUser(_id: ID! ,input: UpdateEventPackUserInput): EventPackUser
	deleteEventPackUser(_id: ID!): Boolean
}